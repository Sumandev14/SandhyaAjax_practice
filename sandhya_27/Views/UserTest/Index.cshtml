@model sandhya_27.Models.Models.UserCustomTest
@using sandhya_27.Helpers.GlobalEnum


@using (Html.BeginForm("createUserTest", "UserTest", FormMethod.Post, new { id = "userTestForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>UserCustomTest</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.F_Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.F_Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.F_Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.L_Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.L_Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.L_Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.C_Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.C_Password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.C_Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Birth, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Birth, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                @Html.ValidationMessageFor(model => model.Birth, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input id="female" type="radio" name="gender"
                       value="Female">
                <label for="female">Female</label>
                <input id="male" type="radio" name="gender"
                       value="Male">
                <label for="male">Male</label>
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Role, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Role, EnumHelper.GetSelectList(typeof(UserTestEnum)), "-- Select Role --", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsDelete, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IsDelete, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IsDelete, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="button" id="submitId" value="Create" class="btn btn-success">Submit</button>
                @*<button type="button" id="updateId" value="Create" class="btn btn-success">Update</button>*@
                <button type="button" id="updateId" value="Update" class="btn btn-success edit-user" data-user-id="@ViewBag.userId">Update</button>
            </div>
        </div>
    </div>
}



<h2 class="text-center">Student data</h2>
<table class="table table-border table-striped" id="tableId" style="margin-top:45px">
    <thead>
        <tr>
            <th>FirstName</th>
            <th>LastName</th>
            <th>Email</th>
            <th>Password</th>
            <th>DOB</th>
            <th>Phone</th>
            <th>Gender</th>
            <th>RoleName</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody id="tableBody">
    </tbody>
</table>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>


    $(document).ready(function () {
        $(".field-validation-error").hide();
        $("#submitId").show();
        $("#updateId").hide();
        getListFunction();
        //debugger
        $.get("/UserTest/userTestList", function (getList) {
            getListFunction(getList);
        });

        function getListFunction(getList) {
            if (Array.isArray(getList) && getList.length > 0) {
                $('#tableId tbody tr').remove();
                getList.forEach(function (x) {
                    var row = "<tr>"
                        + "<td>" + x.F_Name + "</td>"
                        + "<td>" + x.L_Name + "</td>"
                        + "<td>" + x.Email + "</td>"
                        + "<td>" + x.Password + "</td>"
                        + "<td>" + x.BirthDOB + "</td>"
                        + "<td>" + x.Phone + "</td>"
                        + "<td>" + x.Gender + "</td>"
                        + "<td>" + x.RoleType + "</td>"
                        + "<td> <button class='edit-user btn-info' data-user-id='" + x.UserId + "'>Edit</button> | <button class='delete-user btn-danger' data-delete-id=" + x.UserId + ">Delete</button></td>"
                        + "</tr>";

                    $('#tableId tbody').append(row);
                });
            }
        }

        //add data
        $("#submitId").click(function () {
            //debugger
            $.ajax({
                /*debugger*/
                url: "/UserTest/createUserTest",
                type: 'POST',
                data: $("#userTestForm").serialize(),
                dataType: 'json',
                success: function (response) {
                    if (response.success) {
                        console.log(response);
                        alert("Created successfully!!!");
                        getListFunction(response.getList);
                    } else {
                        $(".field-validation-error").show();
                        alert("Getting error!!!");
                    }
                },
                error: function (xhr, status, error) {
                    //console.log(xhr.responseText);
                    // window.location.href = '@Url.Action("Index", "UserTest")';
                    alert("Getting error!!!");
                }
            })
        })

        //get data
        $(document).on("click", ".edit-user", function (event) {
            //debugger
            $("#submitId").hide();
            $("#updateId").show();
            var id = $(this).data("user-id");
            $.get("/UserTest/createUserTest/" + id, function (data) {
                $("#F_Name").val(data.F_Name);
                $('#L_Name').val(data.L_Name);
                $('#Email').val(data.Email);
                $('#C_Password').val(data.C_Password);
                $('#Password').val(data.Password);
                $('#Birth').val(data.Birth);
                $('#Phone').val(data.Phone);
                if (data.Gender === "Female") {
                    $('#female').prop('checked', true);
                } else if (data.Gender === "Male") {
                    $('#male').prop('checked', true);
                }
                $('#Role').val(data.Role);
                $('#IsDelete').val(data.IsDelete);
            })
                .done(function () {
                    alert("User data retrieved successfully");
                })
                .fail(function (xhr, status, error) {
                    console.log(xhr.responseText);
                    alert("Error while retrieving user data");
                });

            // update data
            $("#updateId").click(function () {
               
                $.ajax({
                    url: "/UserTest/createUserTest/" + id,
                    type: 'POST',
                    data: $("#userTestForm").serialize(),
                    success: function (response) {
                        if (response.success) {
                            alert("User updated successfully!");
                        } 
                    },
                    error: function (xhr, status, error) {
                        console.log(xhr.responseText);
                    }
                });
            });
        });

        ///Delete
        $(document).on("click", ".delete-user", function () {
            var id = $(this).data("delete-id");
            //console.log(id);
            $.post("/UserTest/deleteUser/" + id, function (data) {

            })
                .done(function () {
                    alert("Data deleted!!")
                })
                .fail(function (error) {
                    alert("Error while deleting user data");
                });
        })
    });
</script>

